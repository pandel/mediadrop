<?xml version="1.0" encoding="utf-8"?>
<!--!
This file is a part of MediaDrop (http://www.mediadrop.video),
Copyright 2009-2014 MediaDrop contributors.
For the exact contribution history, see the git revision log.
The source code contained in this file is licensed under the GPLv3 or
(at your option) any later version.
See LICENSE.txt in the main project directory, for more information.
-->
<rss xmlns:py="http://genshi.edgewall.org/"
     xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
     xmlns:media="http://search.yahoo.com/mrss/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     version="2.0">
	<channel>
		<title py:content="podcast.title" />
		<link py:content="h.url_for(action='view', qualified=True)" />
		<language>${translator.locale.territory and '%s-%s' % (translator.locale.language, translator.locale.territory.lower()) or translator.locale.language}</language>
		<docs>http://www.rssboard.org/rss-specification</docs>
		<atom:link href="${h.url_for(qualified=True)}" rel="self" type="application/rss+xml" />

		<description py:content="podcast.subtitle" />
		<itunes:subtitle py:content="podcast.subtitle" />
		<itunes:summary py:content="h.strip_xhtml(podcast.description)" />

		<itunes:category py:if="podcast.category"
		                 py:with="category = podcast.category.split(' &gt; ')"
		                 text="${category[0]}">
			<itunes:category py:if="len(category) > 1"
			                 text="${category[1]}" />
		</itunes:category>

		<py:with vars="author_name = podcast.author.name;
		               author_email = podcast.author.email;">
			<managingEditor>${author_email}<py:if test="author_name"> (${author_name})</py:if></managingEditor>
			<itunes:author py:content="author_name" />
			<itunes:owner>
				<itunes:email py:content="author_email" />
				<itunes:name py:content="author_name" py:if="author_name" />
			</itunes:owner>
		</py:with>

		<itunes:explicit py:choose="podcast.explicit">
			<py:when test="None">no</py:when>
			<py:when test="True">yes</py:when>
			<py:otherwise>clean</py:otherwise>
		</itunes:explicit>

		<image py:with="thumb = h.thumb(podcast, 's', qualified=True)">
			<url py:content="thumb.url" />
			<title py:content="podcast.title" />
			<link py:content="h.url_for(action='view', qualified=True)" />
			<width py:content="thumb.x" />
			<height py:content="thumb.y" />
		</image>
		<itunes:image href="${h.thumb_url(podcast, 'l', qualified=True)}" />
		<!--! iTunes image should be square and 600x600 or larger -->

		<copyright py:content="podcast.copyright" />

<!--!	<pubDate />
		<lastBuildDate />
		<ttl />
		<category />
		<rating /> -->

		<item py:for="media in episodes"
		      py:with="permalink = h.url_for(controller='/media', action='view', slug=media.slug, podcast_slug=podcast.slug, qualified=True)">
			<title py:content="media.display_title" />
			<guid py:content="permalink" />
			<pubDate py:content="media.publish_on.strftime('%a, %d %b %Y %H:%M:%S %Z')" />
			<comments py:content="permalink + '#comments'" />
			<author>${media.author.email}<py:if test="media.author.name"> (${media.author.name})</py:if></author>
			<itunes:author py:if="media.author.name" py:content="media.author.name" />
			<description py:content="media.description_plain" />
			<itunes:summary py:content="media.description_plain" />
			<itunes:subtitle py:if="media.subtitle" py:content="media.subtitle" />
			<itunes:subtitle py:if="not media.subtitle" py:content="h.truncate(media.description_plain, 120)" />
			<itunes:duration py:if="media.duration" py:content="media.duration" />
			<itunes:keywords py:content="', '.join(tag.name for tag in media.tags)" />
			<media:thumb py:with="thumb = h.thumb(media, 'm', qualified=True)"
			                 url="${thumb.url}" width="${thumb.x}" height="${thumb.y}" />
			<py:with vars="file = h.pick_podcast_media_file(media)">
				<enclosure py:if="file" py:attrs="dict(
					url = h.best_link_uri(file.get_uris()),
					length = file.size or None,
					type = file.mimetype,
				)" />
				<media:content py:if="file" py:attrs="dict(
					url = h.best_link_uri(file.get_uris()),
					medium = file.type,
					type = file.mimetype,
					fileSize = file.size or None,
					duration = media.duration or None,
					isDefault = 'true',
					expression = 'full',
					lang = 'en',
				)" />
			</py:with>

			<image py:with="thumb = h.thumb(media, 's', qualified=True)">
				<url py:content="thumb.url" />
				<title py:content="media.display_title" />
				<width py:content="thumb.x" />
				<height py:content="thumb.y" />
			</image>
			<itunes:image href="${h.thumb_url(media, 'l', qualified=True)}" />
			<!--! iTunes image should be square and 600x600 or larger -->
		</item>

	</channel>
</rss>
